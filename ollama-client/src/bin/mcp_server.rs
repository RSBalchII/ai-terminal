//! # Ollama MCP Server Binary\n//!\n//! This binary runs an MCP server that exposes Ollama functionality as MCP tools.\n\nuse anyhow::Result;\nuse tokio::io::{stdin, stdout, AsyncBufReadExt, AsyncWriteExt, BufReader};\nuse tracing::{info, error};\n\nuse ollama_client::mcp::OllamaMcpServer;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Initialize logging\n    tracing_subscriber::fmt::init();\n    \n    info!(\"Starting Ollama MCP Server...\");\n    \n    // Create the MCP server\n    let server = OllamaMcpServer::new()?;\n    let io_handler = server.io_handler();\n    \n    // Set up stdin/stdout for JSON-RPC communication\n    let stdin = stdin();\n    let mut stdout = stdout();\n    let mut reader = BufReader::new(stdin);\n    let mut buffer = String::new();\n    \n    info!(\"Ollama MCP Server started and ready to accept requests\");\n    \n    // Main loop for processing JSON-RPC requests\n    loop {\n        buffer.clear();\n        \n        // Read a line from stdin\n        match reader.read_line(&mut buffer).await {\n            Ok(0) => {\n                // EOF reached, exit the loop\n                break;\n            }\n            Ok(_) => {\n                // Process the JSON-RPC request\n                if let Ok(request) = serde_json::from_str(&buffer) {\n                    // Handle the request using the io_handler\n                    if let Some(response) = io_handler.handle_request(&request).await {\n                        // Write the response to stdout\n                        if let Err(e) = stdout.write_all(response.as_bytes()).await {\n                            error!(\"Error writing response to stdout: {}\", e);\n                        }\n                        if let Err(e) = stdout.write_all(b\"\\n\").await {\n                            error!(\"Error writing newline to stdout: {}\", e);\n                        }\n                        if let Err(e) = stdout.flush().await {\n                            error!(\"Error flushing stdout: {}\", e);\n                        }\n                    }\n                } else {\n                    error!(\"Failed to parse JSON-RPC request: {}\", buffer);\n                }\n            }\n            Err(e) => {\n                error!(\"Error reading from stdin: {}\", e);\n                break;\n            }\n        }\n    }\n    \n    info!(\"Ollama MCP Server shutting down\");\n    Ok(())\n}