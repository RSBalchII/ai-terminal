//! Tests for the Ollama client\n\n#[cfg(test)]\nmod tests {\n    use crate::api::{OllamaClient, OllamaRequest};\n    use crate::error::OllamaError;\n    use futures_util::StreamExt;\n    use std::time::Duration;\n    use tokio::time::timeout;\n    use wiremock::{\n        Match, Mock, MockServer, ResponseTemplate,\n        matchers::{method, path}\n    };\n\n    // Test that we can create a new OllamaClient\n    #[tokio::test]\n    async fn test_new_client() -> Result<(), OllamaError> {\n        // This test doesn't actually need a server since we're not making requests\n        let client = OllamaClient::new()?;\n        assert_eq!(client.base_url, \"http://localhost:11434/api\");\n        Ok(())\n    }\n\n    // Test that we can create a new OllamaClient with a custom base URL\n    #[tokio::test]\n    async fn test_new_client_with_custom_base_url() -> Result<(), OllamaError> {\n        // Set the OLLAMA_HOST environment variable\n        std::env::set_var(\"OLLAMA_HOST\", \"http://localhost:3000/api\");\n\n        let client = OllamaClient::new()?;\n        assert_eq!(client.base_url, \"http://localhost:3000/api\");\n\n        // Clean up\n        std::env::remove_var(\"OLLAMA_HOST\");\n        Ok(())\n    }\n\n    // Test that we can send a request to the Ollama API\n    #[tokio::test]\n    async fn test_send_request() -> Result<(), Box<dyn std::error::Error>> {\n        // Start a mock server\n        let mock_server = MockServer::start().await;\n\n        // Set up the mock to expect a POST request to /api/generate\n        Mock::given(method(\"POST\"))\n            .and(path(\"/generate\"))\n            .respond_with(ResponseTemplate::new(200).set_body_string(\n                \"{\\\"model\\\":\\\"llama2\\\",\\\"created_at\\\":\\\"2023-08-04T19:22:45.499127Z\\\",\\\"response\\\":\\\"Hello\\\",\\\"done\\\":false}\\n\\\n                 {\\\"model\\\":\\\"llama2\\\",\\\"created_at\\\":\\\"2023-08-04T19:22:45.499127Z\\\",\\\"response\\\":\\\" World\\\",\\\"done\\\":false}\\n\\\n                 {\\\"model\\\":\\\"llama2\\\",\\\"created_at\\\":\\\"2023-08-04T19:22:45.499127Z\\\",\\\"response\\\":\\\"!\\\",\\\"done\\\":true,\\\"context\\\":[1,2,3]}\\n\"\n            ))\n            .mount(&mock_server)\n            .await;\n\n        // Create a client with the mock server's URL\n        let client = OllamaClient {\n            client: reqwest::Client::new(),\n            base_url: mock_server.uri() + \"/api\",\n        };\n\n        // Create a request\n        let request = OllamaRequest::new(\"llama2\".to_string(), \"Hello\".to_string());\n\n        // Send the request\n        let mut stream = client.chat(request).await?;\n\n        // Collect the responses\n        let mut responses = Vec::new();\n        while let Some(response) = stream.next().await {\n            responses.push(response?);\n        }\n\n        // Verify we got the expected responses\n        assert_eq!(responses.len(), 3);\n        assert_eq!(responses[0].response, \"Hello\");\n        assert_eq!(responses[1].response, \" World\");\n        assert_eq!(responses[2].response, \"!\");\n        assert!(responses[2].done);\n        assert!(responses[2].context.is_some());\n\n        Ok(())\n    }\n\n    // Test that we handle API errors correctly\n    #[tokio::test]\n    async fn test_send_request_api_error() -> Result<(), Box<dyn std::error::Error>> {\n        // Start a mock server\n        let mock_server = MockServer::start().await;\n\n        // Set up the mock to return a 500 error\n        Mock::given(method(\"POST\"))\n            .and(path(\"/generate\"))\n            .respond_with(ResponseTemplate::new(500))\n            .mount(&mock_server)\n            .await;\n\n        // Create a client with the mock server's URL\n        let client = OllamaClient {\n            client: reqwest::Client::new(),\n            base_url: mock_server.uri() + \"/api\",\n        };\n\n        // Create a request\n        let request = OllamaRequest::new(\"llama2\".to_string(), \"Hello\".to_string());\n\n        // Send the request and verify we get an error\n        let result = client.chat(request).await;\n        assert!(result.is_err());\n\n        Ok(())\n    }\n}\n