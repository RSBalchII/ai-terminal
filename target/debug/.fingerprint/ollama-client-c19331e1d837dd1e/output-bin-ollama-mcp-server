{"$message_type":"diagnostic","message":"`main` function not found in crate `ollama_mcp_server`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"ollama-client/src/bin/mcp_server.rs","byte_start":2434,"byte_end":2434,"line_start":1,"line_end":1,"column_start":2435,"column_end":2435,"is_primary":true,"text":[{"text":"//! # Ollama MCP Server Binary\\n//!\\n//! This binary runs an MCP server that exposes Ollama functionality as MCP tools.\\n\\nuse anyhow::Result;\\nuse tokio::io::{stdin, stdout, AsyncBufReadExt, AsyncWriteExt, BufReader};\\nuse tracing::{info, error};\\n\\nuse ollama_client::mcp::OllamaMcpServer;\\n\\n#[tokio::main]\\nasync fn main() -> Result<()> {\\n    // Initialize logging\\n    tracing_subscriber::fmt::init();\\n    \\n    info!(\\\"Starting Ollama MCP Server...\\\");\\n    \\n    // Create the MCP server\\n    let server = OllamaMcpServer::new()?;\\n    let io_handler = server.io_handler();\\n    \\n    // Set up stdin/stdout for JSON-RPC communication\\n    let stdin = stdin();\\n    let mut stdout = stdout();\\n    let mut reader = BufReader::new(stdin);\\n    let mut buffer = String::new();\\n    \\n    info!(\\\"Ollama MCP Server started and ready to accept requests\\\");\\n    \\n    // Main loop for processing JSON-RPC requests\\n    loop {\\n        buffer.clear();\\n        \\n        // Read a line from stdin\\n        match reader.read_line(&mut buffer).await {\\n            Ok(0) => {\\n                // EOF reached, exit the loop\\n                break;\\n            }\\n            Ok(_) => {\\n                // Process the JSON-RPC request\\n                if let Ok(request) = serde_json::from_str(&buffer) {\\n                    // Handle the request using the io_handler\\n                    if let Some(response) = io_handler.handle_request(&request).await {\\n                        // Write the response to stdout\\n                        if let Err(e) = stdout.write_all(response.as_bytes()).await {\\n                            error!(\\\"Error writing response to stdout: {}\\\", e);\\n                        }\\n                        if let Err(e) = stdout.write_all(b\\\"\\\\n\\\").await {\\n                            error!(\\\"Error writing newline to stdout: {}\\\", e);\\n                        }\\n                        if let Err(e) = stdout.flush().await {\\n                            error!(\\\"Error flushing stdout: {}\\\", e);\\n                        }\\n                    }\\n                } else {\\n                    error!(\\\"Failed to parse JSON-RPC request: {}\\\", buffer);\\n                }\\n            }\\n            Err(e) => {\\n                error!(\\\"Error reading from stdin: {}\\\", e);\\n                break;\\n            }\\n        }\\n    }\\n    \\n    info!(\\\"Ollama MCP Server shutting down\\\");\\n    Ok(())\\n}","highlight_start":2435,"highlight_end":2435}],"label":"consider adding a `main` function to `ollama-client/src/bin/mcp_server.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `ollama_mcp_server`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mollama-client/src/bin/mcp_server.rs:1:2435\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mtting down\\\");\\n    Ok(())\\n}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `ollama-client/src/bin/mcp_server.rs`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
